buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.7.1'
        classpath 'org.figurate:gradle-bundle-plugin:1.0.1-SNAPSHOT'
    }
}

plugins {
    id "org.sonarqube" version "1.2"
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'pl.allegro.tech.build.axion-release'

scmVersion {
    tag {
        prefix = 'whistlepost'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = [
            'master': 'simple'
    ]
}

configure(subprojects.findAll {it.name ==~ /^(whistlepost-|sling-).*/}) {

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'bundle'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenCentral()
        // sonatype snapshots
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            url 'https://repository.apache.org/snapshots'
        }
    }

    group = 'org.mnode.whistlepost'
    version = rootProject.scmVersion.version
    description = '''
A publishing platform based on Apache Sling
'''
    task mkClassesDir << {
      new File("$buildDir/classes/main").mkdirs()
    }
    tasks.processResources.dependsOn mkClassesDir

    bundleInstall {
        uri = "$sling_url/system/console/bundles"
        username = sling_username
        password = sling_password
    }

    javadoc {
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    ext {
        isReleaseVersion = !version.endsWith("SNAPSHOT")

        // sonatype credentials
        sonatypeUsername = project.hasProperty('sonatype_username') ? project.getProperty('sonatype_username') : ''
        sonatypePassword = project.hasProperty('sonatype_password') ? project.getProperty('sonatype_password') : ''

        // bintray credentials
        bintray_user = project.hasProperty('bintray_user') ? project.getProperty('bintray_user') : ''
        bintray_key = project.hasProperty('bintray_key') ? project.getProperty('bintray_key') : ''
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatype_username, password: sonatype_password)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: sonatype_username, password: sonatype_password)
                }

                pom.project {
                    name 'Whistlepost'
                    packaging 'jar'
                    description project.description
                    url 'https://whistlepost.org'

                    scm {
                        url 'https://github.com/micronode/whistlepost'
                        connection 'scm:git@github.com:micronode/whistlepost.git'
                        developerConnection 'scm:git@github.com:micronode/whistlepost.git'
                    }

                    licenses {
                        license {
                            name 'Whistlepost - License'
                            url 'https://raw.githubusercontent.com/micronode/whistlepost/master/LICENSE'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'fortuna'
                            name 'Ben Fortuna'
                        }
                    }
                }
            }
        }
    }
    publishing {
        publications {
            mavenArtifacts(MavenPublication) {
                from components.java
                artifact javadocJar
                artifact sourcesJar
                pom.withXml {
                    asNode().appendNode('name', project.name)
                    asNode().appendNode('description', project.description)
                    asNode().appendNode('url', 'http://whistlepost.org')

                    def scmNode = asNode().appendNode('scm')
                    scmNode.appendNode('url', 'https://github.com/micronode/whistlepost')
                    scmNode.appendNode('connection', 'scm:git@github.com:micronode/whistlepost.git')
                    scmNode.appendNode('developerConnection', 'scm:git@github.com:micronode/whistlepost.git')

                    def licenseNode = asNode().appendNode('licenses').appendNode('license')
                    licenseNode.appendNode('name', 'iCal4j - License')
                    licenseNode.appendNode('url', 'https://raw.githubusercontent.com/micronode/whistlepost/master/LICENSE')
                    licenseNode.appendNode('distribution', 'repo')

                    def developerNode = asNode().appendNode('developers').appendNode('developer')
                    developerNode.appendNode('id', 'fortuna')
                    developerNode.appendNode('name', 'Ben Fortuna')
                }
            }
        }
    }

    bintray {
        user = bintray_user
        key = bintray_key
        pkg {
            repo = 'maven'
            name = project.name
            userOrg = 'micronode'
            licenses = ['BSD']
            vcsUrl = 'https://github.com/micronode/whistlepost.git'
            version {
                name = scmVersion.version
                desc = "iCal4j $scmVersion.version"
                released  = new Date()
                vcsTag = "ical4j-$scmVersion.version"
                gpg {
                    sign = isReleaseVersion
                }
                mavenCentralSync {
                    sync = isReleaseVersion
                    user = sonatype_username //OSS user token: mandatory
                    password = sonatype_password //OSS user password: mandatory
//                close = '0' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
//    configurations = ['archives']
        publications = ['mavenArtifacts']
    }
}

