import aQute.bnd.gradle.Bundle

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.apache.sling:org.apache.sling.bnd.models:1.0.0",
                'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.8.1'
    id "com.jfrog.bintray" version "1.7.3" apply false
    id "biz.aQute.bnd.builder" version "5.0.0"
    id "com.moowork.node" version "1.3.1"
}

apply plugin: 'java'
apply plugin: 'docker'

repositories {
    mavenCentral()
    // snapshot of cocoon-seralizers-charsets
    maven {
        url 'https://repository.apache.org/snapshots'
    }
}

scmVersion {
    tag {
        prefix = 'whistlepost'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = [
        'master': 'simple'
    ]
}

ext {
    groovyVersion = '2.4.5'
    slingApiVersion = '2.11.0'
}

node {
    download = true
}

configurations {
    embed
    embed.transitive = false
}

dependencies {
    embed 'org.apache.sling:org.apache.sling.rewriter:1.1.2',
            'org.apache.sling:org.apache.sling.commons.html:1.0.0',
            'org.apache.cocoon:cocoon-serializers-charsets:1.0.3-SNAPSHOT',
            'org.apache.sling:org.apache.sling.urlrewriter:0.0.2',
            'org.apache.servicemix.bundles:org.apache.servicemix.bundles.urlrewritefilter:4.0.4_1',

            // filesystem resource provider
            'org.apache.sling:org.apache.sling.fsresource:2.1.16',

            // groovy
            'org.codehaus.groovy:groovy:2.4.5',
            'org.codehaus.groovy:groovy-jsr223:2.4.5',
            'org.codehaus.groovy:groovy-json:2.4.5',
            'org.codehaus.groovy:groovy-xml:2.4.5',
//          'org.codehaus.groovy:groovy-jmx:2.5.7',
//          'org.codehaus.groovy:groovy-servlet:2.5.7',
            'org.codehaus.groovy:groovy-templates:2.4.5',
            'org.apache.sling:org.apache.sling.scripting.groovy:1.0.2',
            'org.apache.sling:org.apache.sling.scripting.core:2.0.58',

            // thymeleaf
            'org.attoparser:attoparser:2.0.2.RELEASE',
            'org.unbescape:unbescape:1.1.4.RELEASE',
            'org.apache.servicemix.bundles:org.apache.servicemix.bundles.ognl:3.2_1',
            'org.javassist:javassist:3.20.0-GA',
            'org.apache.servicemix.bundles:org.apache.servicemix.bundles.thymeleaf:3.0.11.RELEASE_1',
            'org.apache.sling:org.apache.sling.scripting.thymeleaf:2.0.0',

            // liquid
            'org.jsoup:jsoup:1.10.3',
            'org.antlr:antlr4-runtime:4.7.1',

            // nosql providers..
            'org.apache.sling:org.apache.sling.nosql.generic:1.1.0',
            'org.apache.sling:org.apache.sling.nosql.mongodb-resourceprovider:1.1.0',
            'org.mongodb:mongo-java-driver:3.1.1',

            // sling query
            'org.apache.sling:org.apache.sling.query:4.0.2'
}

task buildWebpack(type: NpmTask) {
    args = ['run', 'buildWebpack']
}

task bundleApp(type: Bundle) {
    archiveBaseName = "whistlepost-app-$scmVersion.version"
    bndfile = 'app.bnd'
    from('src/app') { into 'SLING-INF/content' }
    from('src/assets') { into 'assets' }
}

task bundleConfig(type: Bundle) {
    archiveBaseName = "whistlepost-config-$scmVersion.version"
    bndfile = 'config.bnd'
    from('src/config') { into 'SLING-INF/content' }
    into("SLING-INF/content/install/${bundleStartLevel}") {
        from configurations.embed
    }
}

task bundleContent(type: Bundle) {
    archiveBaseName = "whistlepost-content-$scmVersion.version"
    bndfile = 'content.bnd'
    from('src/content') { into 'SLING-INF/content' }
}

bundleApp.dependsOn buildWebpack
buildWebpack.dependsOn yarn
clean.dependsOn yarn_cache_clean

artifacts {
    archives bundleApp
    archives bundleConfig
    archives bundleContent
}

def bundleprojects = subprojects.findAll {it.name ==~ /^(whistlepost-|sling-).*/}

configure(bundleprojects) { subproject ->
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'biz.aQute.bnd.builder'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    group = 'org.mnode.whistlepost'
    version = rootProject.scmVersion.version
    description = '''
A publishing platform based on Apache Sling
'''

    task bundle(type: Bundle) {
        from sourceSets.main.output
        bndfile = 'bnd.bnd'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
        }
    }

    javadoc {
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    jar.enabled = false
    build.dependsOn bundle
    
    artifacts {
        archives bundle
        archives javadocJar
        archives sourcesJar
    }

    ext {
        isReleaseVersion = !version.endsWith("SNAPSHOT")

        // sonatype credentials
        sonatype_username = project.hasProperty('sonatype_username') ? project.getProperty('sonatype_username') : ''
        sonatype_password = project.hasProperty('sonatype_password') ? project.getProperty('sonatype_password') : ''

        // bintray credentials
        bintray_user = project.hasProperty('bintray_user') ? project.getProperty('bintray_user') : ''
        bintray_key = project.hasProperty('bintray_key') ? project.getProperty('bintray_key') : ''
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatype_username, password: sonatype_password)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: sonatype_username, password: sonatype_password)
                }

                pom.project {
                    name 'Whistlepost'
                    packaging 'jar'
                    description subproject.description
                    url 'https://whistlepost.org'

                    scm {
                        url 'https://github.com/micronode/whistlepost'
                        connection 'scm:git@github.com:micronode/whistlepost.git'
                        developerConnection 'scm:git@github.com:micronode/whistlepost.git'
                    }

                    licenses {
                        license {
                            name 'Whistlepost - License'
                            url 'https://raw.githubusercontent.com/micronode/whistlepost/master/LICENSE'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'fortuna'
                            name 'Ben Fortuna'
                        }
                    }
                }
            }
        }
    }
    publishing {
        publications {
            mavenArtifacts(MavenPublication) {
                from components.java
                artifact javadocJar
                artifact sourcesJar
                pom.withXml {
                    asNode().appendNode('name', subproject.name)
                    asNode().appendNode('description', subproject.description)
                    asNode().appendNode('url', 'http://whistlepost.org')

                    def scmNode = asNode().appendNode('scm')
                    scmNode.appendNode('url', 'https://github.com/micronode/whistlepost')
                    scmNode.appendNode('connection', 'scm:git@github.com:micronode/whistlepost.git')
                    scmNode.appendNode('developerConnection', 'scm:git@github.com:micronode/whistlepost.git')

                    def licenseNode = asNode().appendNode('licenses').appendNode('license')
                    licenseNode.appendNode('name', 'Whistlepost - License')
                    licenseNode.appendNode('url', 'https://raw.githubusercontent.com/micronode/whistlepost/master/LICENSE')
                    licenseNode.appendNode('distribution', 'repo')

                    def developerNode = asNode().appendNode('developers').appendNode('developer')
                    developerNode.appendNode('id', 'fortuna')
                    developerNode.appendNode('name', 'Ben Fortuna')
                }
            }
        }
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        //sign configurations.archives
        sign publishing.publications.mavenArtifacts
    }

    bintray {
        user = bintray_user
        key = bintray_key
        pkg {
            repo = 'whistlepost'
            name = subproject.name
            userOrg = 'micronode'
            licenses = ['BSD']
            vcsUrl = 'https://github.com/micronode/whistlepost.git'
            version {
                name = scmVersion.version
                desc = "Whistlepost $scmVersion.version"
                released  = new Date()
                vcsTag = "whistlepost-$scmVersion.version"
                gpg {
                    sign = isReleaseVersion
                }
                mavenCentralSync {
                    sync = false//isReleaseVersion
                    user = sonatype_username //OSS user token: mandatory
                    password = sonatype_password //OSS user password: mandatory
//                    close = '0' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
//    configurations = ['archives']
        publications = ['mavenArtifacts']
    }
}

task buildDocker(type: Docker) {
    dockerfile = 'Dockerfile'
    applicationName = 'micronode/whistlepost'
    tagVersion = scmVersion.version
    push 'true' == docker_push
    apiUsername = docker_apiUsername
    apiPassword = docker_apiPassword
    apiEmail = docker_apiEmail

    addFile bundleApp.archiveFile.get() as String, "/opt/sling/sling/startup/${bundleStartLevel}/"
    addFile bundleConfig.archiveFile.get() as String, "/opt/sling/sling/startup/${bundleStartLevel}/"
    addFile bundleContent.archiveFile.get() as String, "/opt/sling/sling/startup/${bundleStartLevel}/"

    bundleprojects.each {
        def startLevel = project.hasProperty("${it.name}.bundleStartLevel") ? project.property("${it.name}.bundleStartLevel") : bundleStartLevel
        addFile it.jar.archivePath, "/opt/sling/sling/startup/${startLevel}/"
    }
    bundleprojects.each { dependsOn("${it.name}:bundle") }
}
